{"/home/travis/build/npmtest/node-npmtest-promisify-node/test.js":"/* istanbul instrument in package npmtest_promisify_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-promisify-node/lib.npmtest_promisify_node.js":"/* istanbul instrument in package npmtest_promisify_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_promisify_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_promisify_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-promisify-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-promisify-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_promisify_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_promisify_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_promisify_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_promisify_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_promisify_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_promisify_node.__dirname + '/lib.npmtest_promisify_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-promisify-node/node_modules/promisify-node/index.js":"const Promise = require(\"nodegit-promise\");\nconst args = require(\"./utils/args\");\nconst cloneFunction = require(\"./utils/cloneFunction\");\nconst objectAssign = require(\"object-assign\");\n\n// Unfortunately this list is not exhaustive, so if you find that a method does\n// not use a \"standard\"-ish name, you'll have to extend this list.\nvar callbacks = [\"cb\", \"callback\", \"callback_\", \"done\"];\n\n/**\n * Recursively operate over an object locating \"asynchronous\" functions by\n * inspecting the last argument in the parameter signature for a callback.\n *\n * @param {*} exports - Should be a function or an object, identity other.\n * @param {Function} test - Optional function to identify async methods.\n * @param {String} parentKeyName - Tracks the keyName in a digestable format.\n * @param {Boolean} noMutate - if set to true then all reference properties are\n * cloned to avoid mutating the original object.\n * @returns {*} exports - Identity.\n */\nfunction processExports(exports, test, cached, parentKeyName, noMutate) {\n  if(!exports) {\n    return exports;\n  }\n\n  if(noMutate || typeof exports === \"function\") {\n    // When not mutating we have to cache the original and the wrapped clone.\n    var cacheResult = cached.filter(function(c) { return c.original === exports; });\n    if(cacheResult.length) {\n      return cacheResult[0].wrapped;\n    }\n  } else {\n    // Return early if this object has already been processed.\n    if (cached.indexOf(exports) > -1) {\n      return exports;\n    }\n  }\n\n  // Record this object in the cache, if it is not a function.\n  if(typeof exports != \"function\") {\n    cached.push(exports);\n  }\n\n  // Pass through if not an object or function.\n  if (typeof exports != \"object\" && typeof exports != \"function\") {\n    return exports;\n  }\n\n  var name = exports.name + \"#\";\n  var target;\n\n  // If a function, simply return it wrapped.\n  if (typeof exports === \"function\") {\n    var wrapped = exports;\n    var isAsyncFunction = false;\n\n    // Check the callback either passes the test function, or accepts a callback.\n    if ((test && test(exports, exports.name, parentKeyName))\n      // If the callback name exists as the last argument, consider it an\n      // asynchronous function.  Brittle? Fragile? Effective.\n      || (callbacks.indexOf(args(exports).slice(-1)[0]) > -1)) {\n      // Assign the new function in place.\n      wrapped = Promise.denodeify(exports);\n\n      isAsyncFunction = true;\n    } else if(noMutate) {\n      // If not mutating, then we need to clone the function, even though it isn't async.\n      wrapped = cloneFunction(exports);\n    }\n\n    // Set which object we'll mutate based upon the noMutate flag.\n    target = noMutate ? wrapped : exports;\n\n    // Here we can push our cloned/wrapped function and original onto cache.\n    cached.push({\n      original: exports,\n      wrapped: wrapped\n    });\n\n    // Find properties added to functions.\n    for (var keyName in exports) {\n      target[keyName] = processExports(exports[keyName], test, cached, name, noMutate);\n    }\n\n    // Find methods on the prototype, if there are any.\n    if (Object.keys(exports.prototype).length) {\n      // Attach the augmented prototype.\n      wrapped.prototype = processExports(exports.prototype, test, cached, name, noMutate);\n    }\n\n    // Ensure attached properties to the previous function are accessible.\n    // Only do this if it's an async (wrapped) function, else we're setting\n    // __proto__ to itself, which isn't allowed.\n    if(isAsyncFunction) {\n      wrapped.__proto__ = exports;\n    }\n\n    return wrapped;\n  }\n\n  // Make a shallow clone if we're not mutating and set it as the target, else just use exports\n  target = noMutate ? objectAssign({}, exports) : exports;\n\n  // We have our shallow cloned object, so put it (and the original) in the cache\n  if(noMutate) {\n    cached.push({\n      original: exports,\n      wrapped: target\n    });\n  }\n\n  Object.keys(target).map(function(keyName) {\n    // Convert to values.\n    return [keyName, target[keyName]];\n  }).filter(function(keyVal) {\n    var keyName = keyVal[0];\n    var value = keyVal[1];\n\n    // If an object is encountered, recursively traverse.\n    if (typeof value === \"object\") {\n      processExports(value, test, cached, keyName + \".\", noMutate);\n    } else if (typeof value === \"function\") {\n      // If a filter function exists, use this to determine if the function\n      // is asynchronous.\n      if (test) {\n        // Pass the function itself, its keyName, and the parent keyName.\n        return test(value, keyName, parentKeyName);\n      }\n\n      return true;\n    }\n  }).forEach(function(keyVal) {\n    var keyName = keyVal[0];\n    var func = keyVal[1];\n\n    // Wrap this function and reassign.\n    target[keyName] = processExports(func, test, cached, parentKeyName, noMutate);\n  });\n\n  return target;\n}\n\n/**\n * Public API for Promisify.  Will resolve modules names using `require`.\n *\n * @param {*} name - Can be a module name, object, or function.\n * @param {Function} test - Optional function to identify async methods.\n * @param {Boolean} noMutate - Optional set to true to avoid mutating the target.\n * @returns {*} exports - The resolved value from require or passed in value.\n */\nmodule.exports = function(name, test, noMutate) {\n  var exports = name;\n\n  // If the name argument is a String, will need to resovle using the built in\n  // Node require function.\n  if (typeof name === \"string\") {\n    exports = require(name);\n    // Unless explicitly overridden, don't mutate when requiring modules.\n    noMutate = !(noMutate === false);\n  }\n\n  // Iterate over all properties and find asynchronous functions to convert to\n  // promises.\n  return processExports(exports, test, [], undefined, noMutate);\n};\n\n// Export callbacks to the module.\nmodule.exports.callbacks = callbacks;\n","/home/travis/build/npmtest/node-npmtest-promisify-node/node_modules/promisify-node/utils/args.js":"/**\n * Get the argument names from a given function.\n *\n * @param {Function} func - The function to parse.\n * @returns {Array} arg - List of arguments in the function.\n */\nmodule.exports = function(func) {\n  // First match everything inside the function argument parens.\n  var args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1];\n \n  // Split the arguments string into an array comma delimited.\n  return args.split(\", \").map(function(arg) {\n    // Ensure no inline comments are parsed and trim the whitespace.\n    return arg.replace(/\\/\\*.*\\*\\//, \"\").trim();\n  }).filter(function(arg) {\n    // Ensure no undefineds are added.\n    return arg;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-promisify-node/node_modules/promisify-node/utils/cloneFunction.js":"/**\n * Clones a function, including copying any properties of the function to the clone.\n *\n * @param {Function} func - The function to clone.\n */\nmodule.exports = function cloneFn(func) {\n    var temp;\n    // Check for the memoized value on the function in-case we get called to wrap the same function\n    // (or already wrapped function) again.\n    return func.__cloneFn || (temp = function() {\n      return func.apply(this, arguments);\n    }) &&\n    // Assign __proto__ as a quick way to copy function properties.\n    (temp.__proto__ = func) &&\n    // Lastly, set a cache var on the original and clone, and return the result.\n    (func.__cloneFn = temp.__cloneFn = temp);\n};\n"}